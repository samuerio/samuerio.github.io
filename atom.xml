<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>issUn</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhenghe39.com/"/>
  <updated>2016-09-01T09:52:49.000Z</updated>
  <id>http://zhenghe39.com/</id>
  
  <author>
    <name>issUn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell下的权限控制</title>
    <link href="http://zhenghe39.com/2016/09/01/Shell%E4%B8%8B%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>http://zhenghe39.com/2016/09/01/Shell下的权限控制/</id>
    <published>2016-09-01T09:52:02.000Z</published>
    <updated>2016-09-01T09:52:49.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;用户授权（sudo）&quot;&gt;&lt;a href=&quot;#用户授权（sudo）&quot; class=&quot;headerlink&quot; title=&quot;用户授权（sudo）&quot;&gt;&lt;/a&gt;用户授权（sudo）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;若当前用户没有执行某命令的权限可以使用sudo给其授权&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;文件-目录授权（chmod）&quot;&gt;&lt;a href=&quot;#文件-目录授权（chmod）&quot; class=&quot;headerlink&quot; title=&quot;文件/目录授权（chmod）&quot;&gt;&lt;/a&gt;文件/目录授权（chmod）&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;权限&lt;/th&gt;
&lt;th&gt;r&lt;/th&gt;
&lt;th&gt;w&lt;/th&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;含义&lt;/td&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;td&gt;execute&lt;/td&gt;
&lt;td&gt;相应权限未被授予&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;查看权限&quot;&gt;&lt;a href=&quot;#查看权限&quot; class=&quot;headerlink&quot; title=&quot;查看权限&quot;&gt;&lt;/a&gt;查看权限&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls -l file/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79gw1f1ighhgbxkj20vo024t9h.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;profile文件，权限信息分析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;-rwxrwxr-x&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首位&lt;code&gt;-&lt;/code&gt;    :    类型&lt;/li&gt;
&lt;li&gt;rwx    :    User&lt;/li&gt;
&lt;li&gt;rwx    :    Group&lt;/li&gt;
&lt;li&gt;r—x    :    Other&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;改变权限&quot;&gt;&lt;a href=&quot;#改变权限&quot; class=&quot;headerlink&quot; title=&quot;改变权限&quot;&gt;&lt;/a&gt;改变权限&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方式一:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chmod [ugoa..] [+-=] [rwx] file...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;u「user」g「group」o「other」a「all」&lt;/p&gt;
&lt;p&gt;&lt;em&gt;eg.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chmod -r file : 删除所有用户对file的&lt;code&gt;r&lt;/code&gt;权限&lt;/li&gt;
&lt;li&gt;chmod u +r file : 增加所有用户对file的&lt;code&gt;r&lt;/code&gt;权限&lt;/li&gt;
&lt;li&gt;chmod =r file : 所有用户对file只有&lt;code&gt;r&lt;/code&gt;权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;方式二:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chmod XXX file (chmod -R &lt;span class=&quot;number&quot;&gt;775&lt;/span&gt; directory | chmod &lt;span class=&quot;number&quot;&gt;775&lt;/span&gt; file)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;权限组合&lt;/th&gt;
&lt;th&gt;二进制数&lt;/th&gt;
&lt;th&gt;十进制数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 可读可写可执行&lt;/td&gt;
&lt;td&gt;rwx&lt;/td&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 可读可执行&lt;/td&gt;
&lt;td&gt;r-x&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 可读可写&lt;/td&gt;
&lt;td&gt;rw-&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;eg.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chmod 777 file : 所有用户对file有&lt;code&gt;rwx&lt;/code&gt;权限&lt;/li&gt;
&lt;li&gt;chmod 175 file : file创建者对file有&lt;code&gt;x&lt;/code&gt;权限，group对file有&lt;code&gt;rwx&lt;/code&gt;权限，othor对file有&lt;code&gt;rx&lt;/code&gt;权限&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用户授权（sudo）&quot;&gt;&lt;a href=&quot;#用户授权（sudo）&quot; class=&quot;headerlink&quot; title=&quot;用户授权（sudo）&quot;&gt;&lt;/a&gt;用户授权（sudo）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;若当前用户没有执行某命令的权限可以使用sudo给其授权&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;文件-目录授权（chmod）&quot;&gt;&lt;a href=&quot;#文件-目录授权（chmod）&quot; class=&quot;headerlink&quot; title=&quot;文件/目录授权（chmod）&quot;&gt;&lt;/a&gt;文件/目录授权（chmod）&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;权限&lt;/th&gt;
&lt;th&gt;r&lt;/th&gt;
&lt;th&gt;w&lt;/th&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;含义&lt;/td&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;td&gt;execute&lt;/td&gt;
&lt;td&gt;相应权限未被授予&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="参考资料" scheme="http://zhenghe39.com/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Shell" scheme="http://zhenghe39.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Java反射的应用</title>
    <link href="http://zhenghe39.com/2016/09/01/Java%E5%8F%8D%E5%B0%84%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://zhenghe39.com/2016/09/01/Java反射的应用/</id>
    <published>2016-09-01T08:47:28.000Z</published>
    <updated>2016-09-01T08:53:06.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;JavaBean&quot;&gt;&lt;a href=&quot;#JavaBean&quot; class=&quot;headerlink&quot; title=&quot;JavaBean&quot;&gt;&lt;/a&gt;JavaBean&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.zheges;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Customer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//JavaBean 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String present = &lt;span class=&quot;string&quot;&gt;&quot;God&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Date date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Customer [name=&quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot;, password=&quot;&lt;/span&gt; + password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + &lt;span class=&quot;string&quot;&gt;&quot;, present=&quot;&lt;/span&gt; + present + &lt;span class=&quot;string&quot;&gt;&quot;, date=&quot;&lt;/span&gt; + date + &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getPresent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; present;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPresent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String present)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.present = present;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Date &lt;span class=&quot;title&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Date date)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.date = date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; password)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.password = password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getAB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;AB&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;基本应用&quot;&gt;&lt;a href=&quot;#基本应用&quot; class=&quot;headerlink&quot; title=&quot;基本应用&quot;&gt;&lt;/a&gt;基本应用&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.zheges;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; org.junit.Assert.assertEquals;&lt;span class=&quot;comment&quot;&gt;//静态导入Assert所有静态方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Field;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.Before;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 项目名称：Reflection  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 类名称：FirDemo  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 类描述：反射的基本应用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 创建人：ZHe  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 创建时间：2015年8月29日 下午5:01:43  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 修改人：ZHe  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 修改时间：2015年8月29日 下午5:01:43 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FirDemo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Class&amp;lt;?&amp;gt; clazz;&lt;span class=&quot;comment&quot;&gt;//类的字节码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Customer customer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Customer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 1.加载类，并且获得类的字节码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; ClassNotFoundException &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Before&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; ClassNotFoundException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//1.使用Class的静态方法加载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clazz = Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;com.zheges.Customer&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//注意：这里要使用类的全名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//2.通过类对象获得其字节码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clazz = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Customer().getClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//3.通过类的静态属性获得&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clazz = Customer.class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertEquals(&lt;span class=&quot;string&quot;&gt;&quot;com.zheges.Customer&quot;&lt;/span&gt;,clazz.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 2.获得类的字段(注意：不等同于属性，属性由getter来确定！)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; SecurityException &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; NoSuchFieldException &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IllegalAccessException &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IllegalArgumentException &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getClassProperties&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//1.获得私有字段及其类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Field field = clazz.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class&amp;lt;?&amp;gt; type = field.getType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertEquals(String.class, type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//2.获得公有字段及其类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Field field1 = clazz.getField(&lt;span class=&quot;string&quot;&gt;&quot;present&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class&amp;lt;?&amp;gt; type1 = field1.getType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertEquals(String.class, type1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//3.true if this object is the same as the obj argument; false otherwise.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertEquals(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, field.equals(clazz.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//4.设置某个对象上该字段的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        field.setAccessible(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//该字段是私有的,需要设置setAccessible&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        field.set(customer,&lt;span class=&quot;string&quot;&gt;&quot;ZheGes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        field1.set(customer, &lt;span class=&quot;string&quot;&gt;&quot;Nor&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertEquals(customer.getName(), &lt;span class=&quot;string&quot;&gt;&quot;ZheGes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertEquals(customer.getPresent(), &lt;span class=&quot;string&quot;&gt;&quot;Nor&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//5.获取某个对象上该字段的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertEquals(field.get(customer), &lt;span class=&quot;string&quot;&gt;&quot;ZheGes&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//前提是该私有变量设置了Accessible&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertEquals(field1.get(customer), &lt;span class=&quot;string&quot;&gt;&quot;Nor&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;内省&quot;&gt;&lt;a href=&quot;#内省&quot; class=&quot;headerlink&quot; title=&quot;内省&quot;&gt;&lt;/a&gt;内省&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.zheges;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.beans.BeanInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.beans.IntrospectionException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.beans.Introspector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.beans.PropertyDescriptor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.InvocationTargetException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Method;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; org.junit.Assert.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.Ignore;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 项目名称：Reflection  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 类名称：SecDemo  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 类描述：反射高级应用：内省&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 创建人：ZHe  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 创建时间：2015年8月29日 下午5:03:02  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 修改人：ZHe  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 修改时间：2015年8月29日 下午5:03:02 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SecDemo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//内省：通过反射的方式访问javabean的技术&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//JavaBean:1.必须有无参的构造函数 2.属性必须私有（属性数目由get数目来定，并非由字段来定！）3.提供标准的getter和setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//1.打印Customer的所有属性(包含Object的属性)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*result:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                AB-----Customer getter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                class ----Object getter,getClass----&amp;gt;这个方法是继承Object的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                present*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Ignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getProperties&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IntrospectionException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BeanInfo beanInfo = Introspector.getBeanInfo(Customer.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PropertyDescriptor [] propertyDescriptors = beanInfo.getPropertyDescriptors();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (PropertyDescriptor propertyDescriptor : propertyDescriptors) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(propertyDescriptor.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//2.打印Customer的所有属性（不包含Object的属性）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Ignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getOwnProperties&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IntrospectionException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BeanInfo beanInfo = Introspector.getBeanInfo(Customer.class,Object.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PropertyDescriptor [] propertyDescriptors = beanInfo.getPropertyDescriptors();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (PropertyDescriptor propertyDescriptor : propertyDescriptors) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(propertyDescriptor.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//3.操作JavaBean的指定属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;actProperty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IntrospectionException, IllegalAccessException, IllegalArgumentException, InvocationTargetException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Customer customer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Customer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PropertyDescriptor propertyDescriptor = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PropertyDescriptor(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, Customer.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method method = propertyDescriptor.getWriteMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        method.invoke(customer, &lt;span class=&quot;string&quot;&gt;&quot;zheGes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method method2 = propertyDescriptor.getReadMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(method2.invoke(customer, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//4.获得当前操作属性的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Ignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPropertyType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IntrospectionException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PropertyDescriptor propertyDescriptor = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PropertyDescriptor(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, Customer.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertEquals(String.class, propertyDescriptor.getPropertyType());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;BeanUtils&quot;&gt;&lt;a href=&quot;#BeanUtils&quot; class=&quot;headerlink&quot; title=&quot;BeanUtils&quot;&gt;&lt;/a&gt;BeanUtils&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.zheges;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; org.junit.Assert.assertTrue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.InvocationTargetException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.text.ParseException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.beanutils.BeanUtils;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.beanutils.ConversionException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.beanutils.ConvertUtils;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.beanutils.Converter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.beanutils.locale.converters.DateLocaleConverter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.Ignore;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 项目名称：Reflection  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 类名称：ThrDemo  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 类描述：反射的高级应用2：BeanUtils&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 创建人：ZHe &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 创建时间：2015年8月29日 下午5:50:20  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 修改人：ZHe  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 修改时间：2015年8月29日 下午5:50:20 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThrDemo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Customer customer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Customer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//1.BeanUtils操作属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Ignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;actProperty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IllegalAccessException, InvocationTargetException, Exception&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BeanUtils.setProperty(customer, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ZHeGes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BeanUtils.setProperty(customer, &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;404&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//发生了String转int，但这种转换只支持8种基础类型！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(BeanUtils.getProperty(customer, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                BeanUtils.getProperty(customer, &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//2.对于非基础类型的转换，则要给BeanUtils注册转换器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Ignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registConver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//注册一个日期转换器,Converter接口，使用匿名内部类实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ConvertUtils.register(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Converter()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class type, Object value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == value)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( !(value &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; String))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConversionException(&lt;span class=&quot;string&quot;&gt;&quot;只支持String类型的转换&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String str = (String)value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                SimpleDateFormat simpleDateFormat = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; simpleDateFormat.parse(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(e);&lt;span class=&quot;comment&quot;&gt;//异常链不能断！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, Date.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BeanUtils.setProperty(customer, &lt;span class=&quot;string&quot;&gt;&quot;date&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;1992-3-18&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//The property&#39;s value, converted to a String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(BeanUtils.getProperty(customer, &lt;span class=&quot;string&quot;&gt;&quot;date&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(customer.getDate().toLocaleString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//3.使用Apach公司提供的日期转换器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Ignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registConver2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ConvertUtils.register(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DateLocaleConverter(), Date.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BeanUtils.setProperty(customer, &lt;span class=&quot;string&quot;&gt;&quot;date&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;1992-3-18&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(customer.getDate().toLocaleString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//4.使用BeanUtils将Map对象填充到JavaBean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Ignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;usePopulate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Map map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map.put(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ZheGes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map.put(&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;123&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map.put(&lt;span class=&quot;string&quot;&gt;&quot;date&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;1992-2-1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//日期转换器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ConvertUtils.register(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DateLocaleConverter(), Date.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BeanUtils.populate(customer, map);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(customer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String str = &lt;span class=&quot;string&quot;&gt;&quot;hell&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String str1 = str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        str = &lt;span class=&quot;string&quot;&gt;&quot;wofl&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(str+&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;+str1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Ignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class&amp;lt;String&amp;gt; t1 = String.class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//Class&amp;lt;String&amp;gt; t2 = Date.class;      false：加了类型约束，必须是类String的字节码，否则报错！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class t3 = String.class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertTrue(t1 == t3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JavaBean&quot;&gt;&lt;a href=&quot;#JavaBean&quot; class=&quot;headerlink&quot; title=&quot;JavaBean&quot;&gt;&lt;/a&gt;JavaBean&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="编程札记" scheme="http://zhenghe39.com/categories/%E7%BC%96%E7%A8%8B%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://zhenghe39.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>zTree级联树的优化</title>
    <link href="http://zhenghe39.com/2016/09/01/zTree%E7%BA%A7%E8%81%94%E6%A0%91%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://zhenghe39.com/2016/09/01/zTree级联树的优化/</id>
    <published>2016-09-01T08:00:58.000Z</published>
    <updated>2016-09-01T08:12:52.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;setting-check&quot;&gt;&lt;a href=&quot;#setting-check&quot; class=&quot;headerlink&quot; title=&quot;setting.check&quot;&gt;&lt;/a&gt;setting.check&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     enable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     chkStyle: chkStyle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     nocheckInherit: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     autoCheckTrigger:&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     radioType : &lt;span class=&quot;string&quot;&gt;&quot;all&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     chkboxType: &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;Y&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;s&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;N&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;s&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里未启动zTree的级联配置(&lt;code&gt;autoCheckTrigger&lt;/code&gt;设置为&lt;code&gt;false&lt;/code&gt;)，代替的是我们手动实现级联。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;setting-callback-onCheck&quot;&gt;&lt;a href=&quot;#setting-callback-onCheck&quot; class=&quot;headerlink&quot; title=&quot;setting.callback.onCheck&quot;&gt;&lt;/a&gt;setting.callback.onCheck&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;settings.callback.onCheck = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event, treeId, treeNode&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(treeNode[&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt;])&amp;#123;&lt;span class=&quot;comment&quot;&gt;//勾选&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    treeObj.expandNode(treeNode, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!treeNode.zAsync)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//给需要&quot;异步加载子节点&quot;的节点添加异步任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        treeMethods._invokeNodeAsyncTasks(treeNode,&lt;span class=&quot;string&quot;&gt;&#39;checkChildrenNode&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//若treeNode子节点中有需要异步加载的,则展开并给其分配异步任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; needAsynNodes = treeObj.getNodesByParam(&lt;span class=&quot;string&quot;&gt;&#39;zAsync&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,treeNode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(needAsynNodes &amp;amp;&amp;amp; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; !== needAsynNodes.length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            $.each(needAsynNodes,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;index,needAsynNode&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                treeObj.expandNode(needAsynNode, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                treeMethods._invokeNodeAsyncTasks(needAsynNode,&lt;span class=&quot;string&quot;&gt;&#39;checkChildrenNode&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;// 不选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!treeNode.zAsync)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        treeObj.reAsyncChildNodes(treeNode,&lt;span class=&quot;string&quot;&gt;&#39;refresh&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//加载子节点,但不展开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        treeMethods._invokeNodeAsyncTasks(treeNode,&lt;span class=&quot;string&quot;&gt;&#39;checkOffChildrenNode&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//若treeNode子节点中有需要异步加载的,则加载并给其分配异步任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; needAsynNodes = treeObj.getNodesByParam(&lt;span class=&quot;string&quot;&gt;&#39;zAsync&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,treeNode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(needAsynNodes &amp;amp;&amp;amp; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; !== needAsynNodes.length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            $.each(needAsynNodes,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;index,needAsynNode&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                treeObj.reAsyncChildNodes(needAsynNode,&lt;span class=&quot;string&quot;&gt;&#39;refresh&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//加载子节点,但不展开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                treeMethods._invokeNodeAsyncTasks(needAsynNode,&lt;span class=&quot;string&quot;&gt;&#39;checkOffChildrenNode&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isChecked = treeNode[&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = treeNode.children.length; i &amp;lt; len; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; node = treeNode.children[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    treeObj.checkNode(node, isChecked, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;span class=&quot;comment&quot;&gt;//end for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;treeObj&lt;/code&gt;为zTree树的实例，&lt;code&gt;treeMethods._invokeNodeAsyncTasks&lt;/code&gt;用于给为未加载子节点的父节点添加异步任务。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; treeMethods = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 给节点分配[异步加载成功]后的任务&amp;#123;级联使用&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param treeNode 需要异步加载的节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param taskType 任务类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _invokeNodeAsyncTasks:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;treeNode,taskType&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nodeAsyncTask = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (taskType)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;checkChildrenNode&#39;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                nodeAsyncTask = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event,treeId,treeNode,msg&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; childrenNodes = treeNode.children;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!childrenNodes || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; === childrenNodes.length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    $.each(childrenNodes,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;index,childrenNode&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        treeObj.checkNode(childrenNode,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;checkOffChildrenNode&#39;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                nodeAsyncTask = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event,treeId,treeNode,msg&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; childrenNodes = treeNode.children;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!childrenNodes || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; === childrenNodes.length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    $.each(childrenNodes,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;index,childrenNode&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        treeObj.checkNode(childrenNode,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        treeObj._nodeAsyncTasks[treeNode.id] = nodeAsyncTask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;_nodeAsyncTasks&lt;/code&gt;是添加到zTree实例上面的节点异步任务代理。&lt;/p&gt;
&lt;h3 id=&quot;setting-callback-onAsyncSuccess&quot;&gt;&lt;a href=&quot;#setting-callback-onAsyncSuccess&quot; class=&quot;headerlink&quot; title=&quot;setting.callback.onAsyncSuccess&quot;&gt;&lt;/a&gt;setting.callback.onAsyncSuccess&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;settings.callback.onAsyncSuccess = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event, treeId, treeNode, msg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nodeAsyncTasks = treeObj._nodeAsyncTasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nodeAsyncTasks &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; nodeAsyncTasks[treeNode.id] === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   nodeAsyncTasks[treeNode.id](event, treeId, treeNode, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; nodeAsyncTasks[treeNode.id];&lt;span class=&quot;comment&quot;&gt;//异步任务只执行一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;负责对已经异步加载子节点成功的父节点，执行其绑定在异步任务代理上面的任务。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;setting-check&quot;&gt;&lt;a href=&quot;#setting-check&quot; class=&quot;headerlink&quot; title=&quot;setting.check&quot;&gt;&lt;/a&gt;setting.check&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     enable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     chkStyle: chkStyle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     nocheckInherit: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     autoCheckTrigger:&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     radioType : &lt;span class=&quot;string&quot;&gt;&quot;all&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     chkboxType: &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;Y&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;s&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;N&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;s&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里未启动zTree的级联配置(&lt;code&gt;autoCheckTrigger&lt;/code&gt;设置为&lt;code&gt;false&lt;/code&gt;)，代替的是我们手动实现级联。&lt;/p&gt;
    
    </summary>
    
      <category term="编程札记" scheme="http://zhenghe39.com/categories/%E7%BC%96%E7%A8%8B%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="zTree" scheme="http://zhenghe39.com/tags/zTree/"/>
    
  </entry>
  
  <entry>
    <title>Jsp的静态包含及动态包含</title>
    <link href="http://zhenghe39.com/2016/08/25/Jsp%E7%9A%84%E9%9D%99%E6%80%81%E5%8C%85%E5%90%AB%E5%8F%8A%E5%8A%A8%E6%80%81%E5%8C%85%E5%90%AB/"/>
    <id>http://zhenghe39.com/2016/08/25/Jsp的静态包含及动态包含/</id>
    <published>2016-08-25T02:45:31.000Z</published>
    <updated>2016-08-25T02:49:03.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;主文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@page import=&quot;java.io.PrintWriter&quot;  %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;ISO-8859-1&quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String path = request.getContextPath();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;base href=&quot;&amp;lt;%=basePath%&amp;gt;&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;测试动态包含&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&amp;gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;% &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	String requestParam1 = &quot;test&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	String requestParam2 = &quot;request&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;lt;!-- 动态包含：请求完一个JSP页面，再请求另外一个JSP页面。最终会解析为两个Servlet --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;lt;jsp:include page=&quot;demo.jsp&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&amp;lt;jsp:param value=&quot;&amp;lt;%= requestParam1 %&amp;gt;&quot; name=&quot;requestParam1&quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&amp;lt;jsp:param value=&quot;&amp;lt;%= requestParam2 %&amp;gt;&quot; name=&quot;requestParam2&quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;lt;/jsp:include&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    This is my JSP page. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 静态包含：会合并完再进行解析，最终生成一个Servlet --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;%@include file = &quot;demo2.jsp&quot; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;demo.jsp&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;% &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String param1 = request.getParameter(&quot;requestParam1&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String param2 = request.getParameter(&quot;requestParam2&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		out.println(&quot;param1: &quot;+param1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		out.println(&quot;param2: &quot;+param2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;demo2.jsp&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pageEncoding=&quot;UTF-8&quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;% out.println(&quot;dd&quot;); %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;主文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@page import=&quot;java.io.PrintWriter&quot;  %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;ISO-8859-1&quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String path = request.getContextPath();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;base href=&quot;&amp;lt;%=basePath%&amp;gt;&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;测试动态包含&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&amp;gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;% &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	String requestParam1 = &quot;test&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	String requestParam2 = &quot;request&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;lt;!-- 动态包含：请求完一个JSP页面，再请求另外一个JSP页面。最终会解析为两个Servlet --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;lt;jsp:include page=&quot;demo.jsp&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&amp;lt;jsp:param value=&quot;&amp;lt;%= requestParam1 %&amp;gt;&quot; name=&quot;requestParam1&quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&amp;lt;jsp:param value=&quot;&amp;lt;%= requestParam2 %&amp;gt;&quot; name=&quot;requestParam2&quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;lt;/jsp:include&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    This is my JSP page. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 静态包含：会合并完再进行解析，最终生成一个Servlet --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;%@include file = &quot;demo2.jsp&quot; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="参考资料" scheme="http://zhenghe39.com/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Jsp" scheme="http://zhenghe39.com/tags/Jsp/"/>
    
  </entry>
  
  <entry>
    <title>编码详解</title>
    <link href="http://zhenghe39.com/2016/08/25/%E7%BC%96%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <id>http://zhenghe39.com/2016/08/25/编码详解/</id>
    <published>2016-08-25T02:14:03.000Z</published>
    <updated>2016-08-25T02:40:24.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;为何需要编码&quot;&gt;&lt;a href=&quot;#为何需要编码&quot; class=&quot;headerlink&quot; title=&quot;为何需要编码&quot;&gt;&lt;/a&gt;为何需要编码&lt;/h3&gt;&lt;p&gt;由于人类语言种类太多导致标识这些语言的符号太多，无法使用计算机中的一个基本存储单元&lt;code&gt;byte&lt;/code&gt;来标识，因此需要经过一些翻译工作，才能让计算机理解。编码就是对字节&lt;code&gt;byte&lt;/code&gt;的翻译，即编码情况出现在字符串和字节的互相转化过程中，也就是在IO操作中，IO包括普通文件IO以及网络IO。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;普通IO&quot;&gt;&lt;a href=&quot;#普通IO&quot; class=&quot;headerlink&quot; title=&quot;普通IO&quot;&gt;&lt;/a&gt;普通IO&lt;/h3&gt;&lt;p&gt;有个MyHtml.html文件，这个文件是意UTF-8编码写的，内容如下&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;MyHtml.html&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;GBK&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;keywords&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;keyword1,keyword2,keyword3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;this is my page&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    This is my HTML page.点击 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可知&lt;code&gt;点击&lt;/code&gt;是以UTF-8编码展示的。但是使用浏览器打开该HTML文件时，却显示如下乱码&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79gw1f75s64azbnj20e402yq35.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;这是由于浏览器显示该文件的编码是&lt;code&gt;GBK&lt;/code&gt;{ 标签&lt;code&gt;&amp;lt;meta charset=&amp;quot;GBK&amp;quot; /&amp;gt;&lt;/code&gt;}。&lt;/p&gt;
&lt;h3 id=&quot;网络IO&quot;&gt;&lt;a href=&quot;#网络IO&quot; class=&quot;headerlink&quot; title=&quot;网络IO&quot;&gt;&lt;/a&gt;网络IO&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8b826b79gw1f75scwwtdqg20g0055weh.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图中以 Tomcat 作为 Servlet Engine 为例，它们分别对应到下面这些配置文件中：&lt;br&gt;Port 对应在 Tomcat 的 &lt;connector port=&quot;8080&quot;&gt; 中配置，而 Context Path 在 &lt;context path=&quot;/examples&quot;&gt; 中配置，Servlet Path 在 Web 应用的 web.xml 中&lt;br&gt;URI相关概念：&lt;br&gt;Example:&lt;a href=&quot;http://myhost:8080/people?lastname=Fox&amp;amp;age=30&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://myhost:8080/people?lastname=Fox&amp;amp;age=30&lt;/a&gt;&lt;/context&gt;&lt;/connector&gt;&lt;/p&gt;
&lt;p&gt;request.getScheme()     ===&amp;gt; http&lt;br&gt;request.getServerName() ===&amp;gt; myhost&lt;br&gt;request.getServerPort() ===&amp;gt; 8080&lt;br&gt;request.getRequestURI ===&amp;gt; /people&lt;br&gt;request.getQueryString ===&amp;gt; lastname=Fox&amp;amp;age=30&lt;/p&gt;
&lt;p&gt;URI和queryString是两个独立的编码，由于在传输上的数据只能是字节，所以URI和queryString分别按照其对应码表进行解码为字节，而URL编码规范规定每个16进制表示的字节前加上“%”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以Tomcat服务器为例，看服务器端是如何解码的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解析URL是org.apache.coyote.HTTP11.InternalInputBuffer的parseRequestLine方法，解读其源码可知，其对URI部分的解码是在 &lt;code&gt;&amp;lt;Connector URIEncoding=&amp;#39;UTF-8&amp;#39;/&amp;gt;&lt;/code&gt; 中定义的。至于queryString，其本身是通过HTTP的Header传到服务器的，它的解码要么是ContentType编码中定义的charset要么是ISO-8859-1，而且要使用ContentType中的编码要设置&lt;code&gt;&amp;lt;Connector URIEncoding=&amp;#39;UTF-8&amp;#39; useBodyEncodingForURI=&amp;#39;true&amp;#39;/&amp;gt;&lt;/code&gt; 中的 useBodyEncodingForURI 设置为 true。这个配置项的名字有点让人产生混淆，它并不是对整个 URI 都采用 BodyEncoding 进行解码而仅仅是对 QueryString 使用 BodyEncoding 解码，这一点还要特别注意。&lt;/p&gt;
&lt;p&gt;对于Post表单的编解码，它是通过 HTTP 的 BODY 传递到服务端的。当我们在页面上点击 submit 按钮时浏览器首先将根据 ContentType 的 Charset 编码格式对表单填的参数进行编码然后提交到服务器端，在服务器端同样也是用 ContentType 中字符集进行解码。所以通过 POST 表单提交的参数一般不会出现问题，而且这个字符集编码是我们自己设置的，可以通过 request.setCharacterEncoding(charset) 来设置。&lt;/p&gt;
&lt;h3 id=&quot;额外说明&quot;&gt;&lt;a href=&quot;#额外说明&quot; class=&quot;headerlink&quot; title=&quot;额外说明&quot;&gt;&lt;/a&gt;额外说明&lt;/h3&gt;&lt;p&gt;有些人會直接打開瀏覽器鍵入以下的內容，告訴我：「URL也可以直接打中文啊！」&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79gw1f75shhnjp2j20dr00t749.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;不過你可以將網址列複製，貼到純文字檔案中，你就會看到URI編碼的結果，這其實是現在的瀏覽器很聰明，會自動將上述的URI編碼顯示為中文。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为何需要编码&quot;&gt;&lt;a href=&quot;#为何需要编码&quot; class=&quot;headerlink&quot; title=&quot;为何需要编码&quot;&gt;&lt;/a&gt;为何需要编码&lt;/h3&gt;&lt;p&gt;由于人类语言种类太多导致标识这些语言的符号太多，无法使用计算机中的一个基本存储单元&lt;code&gt;byte&lt;/code&gt;来标识，因此需要经过一些翻译工作，才能让计算机理解。编码就是对字节&lt;code&gt;byte&lt;/code&gt;的翻译，即编码情况出现在字符串和字节的互相转化过程中，也就是在IO操作中，IO包括普通文件IO以及网络IO。&lt;/p&gt;
    
    </summary>
    
      <category term="参考资料" scheme="http://zhenghe39.com/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="编码" scheme="http://zhenghe39.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Native ajax</title>
    <link href="http://zhenghe39.com/2016/08/25/native-ajax/"/>
    <id>http://zhenghe39.com/2016/08/25/native-ajax/</id>
    <published>2016-08-25T01:29:38.000Z</published>
    <updated>2016-08-25T01:50:58.000Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function addURLParam(url,name,value)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url += (url.indexOf(&#39;?&#39;) == -1) ? &#39;?&#39; : &#39;&amp;amp;&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url += encodeURIComponent(name) + &#39;=&#39; + encodeURIComponent(value);//必须&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var xhr = new XMLHttpRequest();//不建议重用XHR对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//xhr状态改变事件准备&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(4 === xhr.readyState)&amp;#123;//已收到全部响应数据，而且可以在客户端使用了(XMLHttpRequest对象状态的说明)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(xhr.status === 200 || xhr.status === 304)&amp;#123;//响应Http状态的说明，成功返回的标识：200/304&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //收到服务器的响应后，响应数据会自动填充XHR对象的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(xhr.responseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&#39;Request was unsuccessful: &#39;+xhr.statusText+xhr.status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var url = &#39;exmple.php&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addURLParam(url,&#39;userName&#39;,&#39;Zhe&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addURLParam(url,&#39;password&#39;,&#39;111111&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(‘get&#39;,url,false);//此时并未发送，而只是启动一个请求以备发送&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send(null);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这里值得注意的问题是URL上QueryString的编码问题，查询字符串中每个参数的名称和值&lt;br&gt;都必须使用encodeURIComponent进行编码，才能放到URL的末尾,并且使用&amp;amp;分隔！&lt;/p&gt;
&lt;p&gt;下面是“ajax模拟表单提交”的例子&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; === xhr.readyState)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(xhr.status === &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; || xhr.status === &lt;span class=&quot;number&quot;&gt;304&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(xhr.responseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&lt;span class=&quot;string&quot;&gt;&#39;Request was unsuccessful: &#39;&lt;/span&gt;+xhr.statusText+xhr.status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(&lt;span class=&quot;string&quot;&gt;&#39;post&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;postexample.php&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.setRequestHeader(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;application/x-www-form-urlencoded&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send($(&lt;span class=&quot;string&quot;&gt;&quot;#user-info&quot;&lt;/span&gt;).serialize(form));&lt;span class=&quot;comment&quot;&gt;//发送表单序列化后的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function addURLParam(url,name,value)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url += (url.indexOf(&#39;?&#39;) == -1) ? &#39;?&#39; : &#39;&amp;amp;&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url += encodeURIComponent(name) + &#39;=&#39; + encodeURIComponent(value);//必须&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var xhr = new XMLHttpRequest();//不建议重用XHR对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//xhr状态改变事件准备&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(4 === xhr.readyState)&amp;#123;//已收到全部响应数据，而且可以在客户端使用了(XMLHttpRequest对象状态的说明)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(xhr.status === 200 || xhr.status === 304)&amp;#123;//响应Http状态的说明，成功返回的标识：200/304&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //收到服务器的响应后，响应数据会自动填充XHR对象的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(xhr.responseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&#39;Request was unsuccessful: &#39;+xhr.statusText+xhr.status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var url = &#39;exmple.php&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addURLParam(url,&#39;userName&#39;,&#39;Zhe&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addURLParam(url,&#39;password&#39;,&#39;111111&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(‘get&#39;,url,false);//此时并未发送，而只是启动一个请求以备发送&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send(null);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="参考资料" scheme="http://zhenghe39.com/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Javascript" scheme="http://zhenghe39.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>media媒体查询器用法总结</title>
    <link href="http://zhenghe39.com/2016/07/11/%E8%BD%AC%E8%BD%BD-Css3-media%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E5%99%A8%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://zhenghe39.com/2016/07/11/转载-Css3-media媒体查询器用法总结/</id>
    <published>2016-07-11T09:23:51.000Z</published>
    <updated>2016-07-11T09:42:52.000Z</updated>
    
    <content type="html">&lt;p&gt;转载来自 520UED &lt;a href=&quot;http://www.520ued.com/article/53882d7ab992a7c43f5c204b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.520ued.com/article/53882d7ab992a7c43f5c204b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   随着响应式设计模型的诞生，Web网站又要发生翻天腹地的改革浪潮，可能有些人会觉得在国内IE6用户居高不下的情况下，这些新的技术还不会广泛的蔓延下去，那你就错了，如今淘宝，凡客，携程等等公司都已经在大胆的尝试了这项技术，并完美的应用在了自己的网站上了。再不更新知识你就老了。我今天就总结一下响应式设计的核心CSS技术Media(媒体查询器)的用法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;准备工作1：设置Meta标签&quot;&gt;&lt;a href=&quot;#准备工作1：设置Meta标签&quot; class=&quot;headerlink&quot; title=&quot;准备工作1：设置Meta标签&quot;&gt;&lt;/a&gt;准备工作1：设置Meta标签&lt;/h3&gt;&lt;p&gt;首先我们在使用Media的时候需要先设置下面这段代码，来兼容移动设备的展示效果：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码的几个参数解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;width = device-width：宽度等于当前设备的宽度&lt;/li&gt;
&lt;li&gt;initial-scale：初始的缩放比例（默认设置为1.0）  &lt;/li&gt;
&lt;li&gt;minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    &lt;/li&gt;
&lt;li&gt;maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   &lt;/li&gt;
&lt;li&gt;user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;准备工作2：加载兼容文件JS&quot;&gt;&lt;a href=&quot;#准备工作2：加载兼容文件JS&quot; class=&quot;headerlink&quot; title=&quot;准备工作2：加载兼容文件JS&quot;&gt;&lt;/a&gt;准备工作2：加载兼容文件JS&lt;/h3&gt;&lt;p&gt;因为IE8既不支持HTML5也不支持CSS3 Media，所以我们需要加载两个JS文件，来保证我们的代码实现兼容效果：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;script src=&quot;https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;script src=&quot;https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;![endif]--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;准备工作3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加&quot;&gt;&lt;a href=&quot;#准备工作3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加&quot; class=&quot;headerlink&quot; title=&quot;准备工作3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)&quot;&gt;&lt;/a&gt;准备工作3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)&lt;/h3&gt;&lt;p&gt;现在有很多人的IE浏览器都升级到IE9以上了，所以这个时候就有又很多诡异的事情发生了，例如现在是IE9的浏览器，但是浏览器的文档模式却是IE8.为了防止这种情况，我们需要下面这段代码来让IE的文档模式永远都是最新的：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;IE=edge&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过我最近又发现了一个更给力的写法：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;IE=Edge，chrome=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;怎么这段代码后面加了一个chrome=1，这个Google Chrome Frame（谷歌内嵌浏览器框架GCF），如果有的用户电脑里面装了这个chrome的插件，就可以让电脑里面的IE不管是哪个版本的都可以使用Webkit引擎及V8引擎进行排版及运算，无比给力，不过如果用户没装这个插件，那这段代码就会让IE以最高的文档模式展现效果。这段代码我还是建议你们用上，不过不用也是可以的&lt;/p&gt;
&lt;h3 id=&quot;CSS3-Media&quot;&gt;&lt;a href=&quot;#CSS3-Media&quot; class=&quot;headerlink&quot; title=&quot;CSS3 Media&quot;&gt;&lt;/a&gt;CSS3 Media&lt;/h3&gt;&lt;p&gt;我们来实现等于960px尺寸的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (max-device-width:&lt;span class=&quot;number&quot;&gt;960px&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;red&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就是当浏览器尺寸大于960px时候的代码了：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (min-width:&lt;span class=&quot;number&quot;&gt;960px&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;orange&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们还可以混合使用上面的用法：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (min-width:&lt;span class=&quot;number&quot;&gt;960px&lt;/span&gt;) and (max-width:&lt;span class=&quot;number&quot;&gt;1200px&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;yellow&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的这段代码的意思是当页面宽度大于960px小于1200px的时候执行下面的CSS。&lt;/p&gt;
&lt;h3 id=&quot;Media所有参数汇总&quot;&gt;&lt;a href=&quot;#Media所有参数汇总&quot; class=&quot;headerlink&quot; title=&quot;Media所有参数汇总&quot;&gt;&lt;/a&gt;Media所有参数汇总&lt;/h3&gt;&lt;p&gt;以上就是我们最常需要用到的媒体查询器的三个特性，大于，等于，小于的写法。媒体查询器的全部功能肯定不止这三个功能，下面是我总结的它的一些参数用法解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;width:浏览器可视宽度。&lt;/li&gt;
&lt;li&gt;height:浏览器可视高度。&lt;/li&gt;
&lt;li&gt;device-width:设备屏幕的宽度。&lt;/li&gt;
&lt;li&gt;device-height:设备屏幕的高度。&lt;/li&gt;
&lt;li&gt;orientation:检测设备目前处于横向还是纵向状态。&lt;/li&gt;
&lt;li&gt;aspect-ratio:检测浏览器可视宽度和高度的比例。(例如：aspect-ratio:16/9)&lt;/li&gt;
&lt;li&gt;device-aspect-ratio:检测设备的宽度和高度的比例。&lt;/li&gt;
&lt;li&gt;color:检测颜色的位数。（例如：min-color:32就会检测设备是否拥有32位颜色）&lt;/li&gt;
&lt;li&gt;color-index:检查设备颜色索引表中的颜色，他的值不能是负数。&lt;/li&gt;
&lt;li&gt;monochrome:检测单色楨缓冲区域中的每个像素的位数。（这个太高级，估计咱很少会用的到）&lt;/li&gt;
&lt;li&gt;resolution:检测屏幕或打印机的分辨率。(例如：min-resolution:300dpi或min-resolution:118dpcm)。&lt;/li&gt;
&lt;li&gt;grid：检测输出的设备是网格的还是位图设备。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转载来自 520UED &lt;a href=&quot;http://www.520ued.com/article/53882d7ab992a7c43f5c204b&quot;&gt;http://www.520ued.com/article/53882d7ab992a7c43f5c204b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   随着响应式设计模型的诞生，Web网站又要发生翻天腹地的改革浪潮，可能有些人会觉得在国内IE6用户居高不下的情况下，这些新的技术还不会广泛的蔓延下去，那你就错了，如今淘宝，凡客，携程等等公司都已经在大胆的尝试了这项技术，并完美的应用在了自己的网站上了。再不更新知识你就老了。我今天就总结一下响应式设计的核心CSS技术Media(媒体查询器)的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://zhenghe39.com/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Css" scheme="http://zhenghe39.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>Java基本类型转数据库类型</title>
    <link href="http://zhenghe39.com/2016/06/28/Java%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B/"/>
    <id>http://zhenghe39.com/2016/06/28/Java基本类型转数据库类型/</id>
    <published>2016-06-28T05:23:00.000Z</published>
    <updated>2016-07-04T01:03:52.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8b826b79gw1f5avjvoovqj216k0bc422.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;prestatement.setObject(int parameterIndex,Object x) throws SQLException&lt;/code&gt;尝试将Java类型转化为对应的数据库类型。那么这里的Java类型Object会转换为哪种数据库类型呢&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JDBC 在 &lt;code&gt;java.sql.Types&lt;/code&gt;类中定义了一系列的常规 SQL 类型标识符。这些类型可用于表示那些最为常用的 SQL 类型。在用 JDBC API 编程时，程序员通常可以使用这些 JDBC 类型来引用一般的 SQL 类型，而无须关心目标数据库所用的确切 SQL 类型的名称。&lt;/p&gt;
&lt;p&gt;值得注意的是：Java的枚举类型没有&lt;code&gt;SQL type{java.sql.Types}&lt;/code&gt;对应，需手动转化为String类型或其他基本类型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/8b826b79gw1f5azpabrfqj20au0si76i.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下是Orable的Sql Type和Java类型的转化关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8b826b79gw1f5avp6278pj20rf0ibdji.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8b826b79gw1f5avjvoovqj216k0bc422.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;prestatement.setObject(int parameterIndex,Object x) throws SQLException&lt;/code&gt;尝试将Java类型转化为对应的数据库类型。那么这里的Java类型Object会转换为哪种数据库类型呢&lt;/p&gt;
    
    </summary>
    
      <category term="参考资料" scheme="http://zhenghe39.com/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Java" scheme="http://zhenghe39.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Javascript正则表达式</title>
    <link href="http://zhenghe39.com/2016/06/27/JavaScript-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://zhenghe39.com/2016/06/27/JavaScript-正则表达式/</id>
    <published>2016-06-27T08:24:14.000Z</published>
    <updated>2016-07-11T14:06:14.000Z</updated>
    
    <content type="html">&lt;p&gt;转载自&lt;a href=&quot;http://www.cnblogs.com/dolphinX/p/3486214.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/dolphinX/p/3486214.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;JavaScript种正则表达式有两种定义方式，定义一个匹配类似 &lt;code&gt;&amp;lt;%XXX%&amp;gt;&lt;/code&gt;的字符串&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reg=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;%[^%&amp;gt;]+%&amp;gt;&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;g&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;字面量&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reg=&lt;span class=&quot;regexp&quot;&gt;/&amp;lt;%[^%&amp;gt;]%&amp;gt;/g&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;g： global，全文搜索，默认搜索到第一个结果接停止&lt;/li&gt;
&lt;li&gt;i： ingore case，忽略大小写，默认大小写敏感&lt;/li&gt;
&lt;li&gt;m： multiple lines，多行搜索（更改^ 和$的含义，使它们分别在任意一行对待行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配）&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h3&gt;&lt;p&gt;正则表达式让人望而却步以一个重要原因就是其转义字符太多了，组合非常之多，但是正则表达式的元字符（在正则表达式中具有特殊意义的专用字符，可以用来规定其前导字符）并不多&lt;/p&gt;
&lt;p&gt;元字符：( [ { \ ^ $ | ) ? * + .&lt;/p&gt;
&lt;p&gt;并不是每个元字符都有其特定意义，在不同的组合中元字符有不同的意义，分类看一下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预定义特殊字符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义 &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;水平制表符 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;回车符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;换行符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;换页符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;td&gt;垂直制表符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\0&lt;/td&gt;
&lt;td&gt;空字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;字符类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般情况下正则表达式一个字符（转义字符算一个）对应字符串一个字符，表达式 ab\t 的含义是&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79gw1f59vmjfrpuj204f018wea.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是我们可以使用元字符[]来构建一个简单的类，所谓类是指，符合某些特征的对象，是一个泛指，而不是特指某个字符了，我们可以使用表达式 [abc] 把字符a或b或c归为一类，表达式可以匹配这类的字符&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8b826b79gw1f59vmw9zg1j204i03jwec.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;元字符[]组合可以创建一个类，我们还可以使用元字符^创建反向类/负向类，反向类的意思是不属于XXX类的内容，表达式 [^abc] 表示不是字符a或b或c的内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79gw1f59vnyhg6yj204e03mt8k.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;范围类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按照上面的说明要是我们希望匹配单个数字那么表达式是这样的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[0123456789]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果是字母那么。。。，好麻烦，正则表达式还提供了范围类，我们可以使用 x-y来连接两个字符表示从x到y的任意字符，这是个闭区间，也就是说包含x和ybenshen，这样匹配小写字母就很简单了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[a-z]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8b826b79gw1f59vvs3zxuj204701tmwz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;要是想匹配所有字母呢？在[]组成的类内部是可以连写的，我们还可以这样写 [a-zA-Z]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79gw1f59vwe78a5j204c02oq2t.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预定义类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚才使用正则我们创建了几个类，来表示数字，字母等，但这样写也很是麻烦，正则表达式为我们提供了几个常用的预定义类来匹配常见的字符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;等价类&lt;/th&gt;
&lt;th&gt;含义 &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;[^\n\r]&lt;/td&gt;
&lt;td&gt;除了所有回车和换行之外的所有字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;[0-9]&lt;/td&gt;
&lt;td&gt;数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;[^0-9]&lt;/td&gt;
&lt;td&gt;非数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;[\t\n\x0B\f\r]&lt;/td&gt;
&lt;td&gt;空白符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;[^\t\n\x0B\f\r]&lt;/td&gt;
&lt;td&gt;非空白符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;[a-zA-Z_0-9]&lt;/td&gt;
&lt;td&gt;单词字符（字母、数字、下划线）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;[^a-zA-Z_0-9]&lt;/td&gt;
&lt;td&gt;非单词字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;有了这些预定义类，写一些正则就很方便了，比如我们希望匹配一个 ab+数字+任意字符 的字符串，就可以这样写了 &lt;code&gt;ab\d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8b826b79gw1f59w5mll5yj206j017jr9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;边界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正则表达式还提供了几个常用的边界匹配字符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;以xx开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;以xx结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;单词边界，指[a-zA-Z_0-9]之外的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\B&lt;/td&gt;
&lt;td&gt;非单词边界&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;看个不负责任的邮箱正则匹配（切勿模仿，小括号后面会讲到） &lt;code&gt;\w+@\w+\.(com)$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79gw1f59wb8hdcrj20bq027glo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;量词&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前我们介绍的方法都是一一匹配的，如果我们希望匹配一个连续出现20次数字的字符串难道我们需要写成这样&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\d\d\d\d...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为此正则表达式引入了一些量词&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;？&lt;/td&gt;
&lt;td&gt;出现零次或一次 (最多出现一次)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;出现一次或多次 （至少出现一次）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;出现零次或多次 （任意次）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n}&lt;/td&gt;
&lt;td&gt;出现n次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,m}&lt;/td&gt;
&lt;td&gt;出现n到m次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,}&lt;/td&gt;
&lt;td&gt;至少出现n次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;看几个使用量词的例子&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\w+\b Byron&lt;/code&gt; 匹配 单词＋边界＋Byron &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;regexp&quot;&gt;/\w+\b Byron/&lt;/span&gt;).test(&lt;span class=&quot;string&quot;&gt;&#39;Hi Byron&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;regexp&quot;&gt;/\w+\b Byron/&lt;/span&gt;).test(&lt;span class=&quot;string&quot;&gt;&#39;Welcome Byron&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;regexp&quot;&gt;/\w+\b Byron/&lt;/span&gt;).test(&lt;span class=&quot;string&quot;&gt;&#39;HiByron&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;\d+\.\d{1,3}&lt;/code&gt; 匹配三位小数的数字&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8b826b79gw1f59wv8thzkj206e01zjra.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;贪婪模式与非贪婪模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看了上面介绍的量词，也许爱思考的同学会想到关于匹配原则的一些问题，比如{3,5}这个量词，要是在句子种出现了十次，那么他是每次匹配三个还是五个，反正3、4、5都满足3～5的条件，量词在默认下是尽可能多的匹配的，也就是大家常说的贪婪模式&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;123456789&#39;&lt;/span&gt;.match(&lt;span class=&quot;regexp&quot;&gt;/\d&amp;#123;3,5&amp;#125;/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&quot;12345&quot;, &quot;6789&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 既然有贪婪模式，那么肯定会有非贪婪模式，让正则表达式尽可能少的匹配，也就是说一旦成功匹配不不再继续尝试，做法很简单，在量词后加上 ? 即可&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;123456789&#39;&lt;/span&gt;.match(&lt;span class=&quot;regexp&quot;&gt;/\d&amp;#123;3,5&amp;#125;?/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&quot;123&quot;, &quot;456&quot;, &quot;789&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt; 分组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有时候我们希望使用量词的时候匹配多个字符，而不是像上面例子只是匹配一个，比如希望匹配Byron出现20次的字符串，我们如果写成 &lt;code&gt;Byron{20}&lt;/code&gt; 的话匹配的是Byro＋n出现20次，怎么把Byron作为一个整体呢？使用()就可以达到次目的，我们称为分组&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(Byron){20}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8b826b79gw1f59x2j5kqdj205d02pq2u.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果希望匹配Byron或Casper出现20次该怎么办呢？可以使用字符 ｜ 达到或的功效&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(Byron|Casper){20}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79gw1f59x3jwy1tj206t03o0sr.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们看到图中有个＃1的东东，那是什么？使用分组的正则表达式会把匹配项也放到分组中，默认就是按数字编号分发的，各异根据编号获得捕获的分组内容，这个在一些希望具体操作第几个匹配项的函数中很有用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(Byron).(ok)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8b826b79gw1f59x66zwamj2084027aa2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果有分组嵌套的情况，外面的组的编号靠前&lt;/p&gt;
&lt;p&gt;&lt;code&gt;((^|%&amp;gt;)[^\t]*)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8b826b79gw1f59x6ueoj2j209n03v74i.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有时候我们不希望捕获某些分组，只需要在分组内加上 ?: 就可以了，着并不意味着该分组内容不属于正则表达式，只是不会给这个分组加编号了而已&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(?:Byron).(ok)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8b826b79gw1f59x7tvlh9j207r024wef.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实在C#等语言中分组还可以起名字，不过JavaScript不支持&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前瞻&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;exp1(?=exp2)&lt;/td&gt;
&lt;td&gt;匹配后面是exp2的exp1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exp1(?!exp2)&lt;/td&gt;
&lt;td&gt;匹配后面不是exp2的exp1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;说的有些抽象，看个例子 &lt;code&gt;good(?=Byron)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8b826b79gw1f59xc3hgdhj206w025q2v.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;regexp&quot;&gt;/good(?=Byron)/&lt;/span&gt;).exec(&lt;span class=&quot;string&quot;&gt;&#39;goodByron123&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&#39;good&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;regexp&quot;&gt;/good(?=Byron)/&lt;/span&gt;).exec(&lt;span class=&quot;string&quot;&gt;&#39;goodCasper123&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;regexp&quot;&gt;/bad(?=Byron)/&lt;/span&gt;).exec(&lt;span class=&quot;string&quot;&gt;&#39;goodCasper123&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面例子可以看出 exp1(?=exp2) 表达式会匹配exp1表达式，但只有其后面内容是exp2的时候才会匹配，也就是两个条件，exp1(?!exp2) 比较类似&lt;/p&gt;
&lt;p&gt;&lt;code&gt;good(?!Byron)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79gw1f59xcccxmej206f022q2v.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;regexp&quot;&gt;/good(?!Byron)/&lt;/span&gt;).exec(&lt;span class=&quot;string&quot;&gt;&#39;goodByron123&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//null &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;regexp&quot;&gt;/good(?!Byron)/&lt;/span&gt;).exec(&lt;span class=&quot;string&quot;&gt;&#39;goodCasper123&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&#39;good&#39;] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;regexp&quot;&gt;/bad(?!Byron)/&lt;/span&gt;).exec(&lt;span class=&quot;string&quot;&gt;&#39;goodCasper123&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;http://www.cnblogs.com/dolphinX/p/3486214.html&quot;&gt;http://www.cnblogs.com/dolphinX/p/3486214.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;JavaScript种正则表达式有两种定义方式，定义一个匹配类似 &lt;code&gt;&amp;lt;%XXX%&amp;gt;&lt;/code&gt;的字符串&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reg=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;%[^%&amp;gt;]+%&amp;gt;&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;g&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;字面量&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reg=&lt;span class=&quot;regexp&quot;&gt;/&amp;lt;%[^%&amp;gt;]%&amp;gt;/g&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;g： global，全文搜索，默认搜索到第一个结果接停止&lt;/li&gt;
&lt;li&gt;i： ingore case，忽略大小写，默认大小写敏感&lt;/li&gt;
&lt;li&gt;m： multiple lines，多行搜索（更改^ 和$的含义，使它们分别在任意一行对待行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://zhenghe39.com/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Javascript" scheme="http://zhenghe39.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JSP&amp;&amp;Servlet</title>
    <link href="http://zhenghe39.com/2016/06/23/JSP%E4%B8%8EServlet/"/>
    <id>http://zhenghe39.com/2016/06/23/JSP与Servlet/</id>
    <published>2016-06-23T15:13:13.000Z</published>
    <updated>2016-06-23T15:25:24.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;JSP即&lt;code&gt;JavaServer Pages&lt;/code&gt;，一种使软件开发者可以响应客户端请求，而动态生成HTML、XML或其他格式文档的Web网页技术标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JSP是以&lt;code&gt;Java&lt;/code&gt;作为脚本语言，Servlet是Java提供的用于&lt;code&gt;开发Web服务器应用的组件&lt;/code&gt;。两种都是用于动态生成内容，那么既然有Servlet为什么还要有JSP呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;使用Servlet生成动态页面，需要在代码中打印输出很多HTML标签&lt;/li&gt;
&lt;li&gt;网页编辑人员不了解Java，无法修改Servlet代码&lt;/li&gt;
&lt;li&gt;Java程序员不了解网页编辑人员的意图，以至于无法修改和实现网页功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为解决如上问题所以才有了JSP技术，JSP会被JSP编译器编译成Java Servlets。静态数据在输入文件中的内容和输出给HTTP响应的内容完全一致。此时，该JSP输入文件会是一个没有内嵌JAVA或动作的HTML页面。&lt;/p&gt;
&lt;p&gt;JSP侧重于视图，Servlet主要用于控制逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79jw1f55knjaltkj20jg0jojsn.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JSP即&lt;code&gt;JavaServer Pages&lt;/code&gt;，一种使软件开发者可以响应客户端请求，而动态生成HTML、XML或其他格式文档的Web网页技术标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JSP是以&lt;code&gt;Java&lt;/code&gt;作为脚本语言，Servlet是Java提供的用于&lt;code&gt;开发Web服务器应用的组件&lt;/code&gt;。两种都是用于动态生成内容，那么既然有Servlet为什么还要有JSP呢？&lt;/p&gt;
    
    </summary>
    
      <category term="参考资料" scheme="http://zhenghe39.com/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Java" scheme="http://zhenghe39.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Javascript模块化</title>
    <link href="http://zhenghe39.com/2016/06/22/Javascript%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://zhenghe39.com/2016/06/22/Javascript模块化/</id>
    <published>2016-06-22T06:46:50.000Z</published>
    <updated>2016-06-22T15:10:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;AMD&amp;amp;&amp;amp;CMD是浏览器端模块化开发的规范，服务器端的规范是CommonJS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8b826b79jw1f54e31blynj209g0bymxm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;AMD-amp-amp-CMD&quot;&gt;&lt;a href=&quot;#AMD-amp-amp-CMD&quot; class=&quot;headerlink&quot; title=&quot;AMD&amp;amp;&amp;amp;CMD&quot;&gt;&lt;/a&gt;AMD&amp;amp;&amp;amp;CMD&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;共性：&lt;/strong&gt;&lt;code&gt;define&lt;/code&gt;定义模块，&lt;code&gt;require&lt;/code&gt;调用模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;差异：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AMD是&lt;code&gt;RequireJS&lt;/code&gt;在推广过程中对模块定义的规范化产出&lt;/li&gt;
&lt;li&gt;CMD是&lt;code&gt;SeaJS&lt;/code&gt;在推广过程中对模块定义的规范化产出&lt;/li&gt;
&lt;li&gt;AMD和CMD最大区别：RequireJS是&lt;code&gt;「预执行」&lt;/code&gt;{所有require都被提前执行}，而SeaJS是&lt;code&gt;「懒执行」&lt;/code&gt;{需要使用依赖模块时才执行该模块}。俗话说：“RequireJS没有明显的BUG，SeaJS是明显没BUG”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CommonJS&quot;&gt;&lt;a href=&quot;#CommonJS&quot; class=&quot;headerlink&quot; title=&quot;CommonJS&quot;&gt;&lt;/a&gt;CommonJS&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;一个单独的文件就是一个模块，模块拥有自己单独的作用域。通过&lt;code&gt;module.exports&lt;/code&gt;输出模块变量，&lt;code&gt;require&lt;/code&gt;调用模块&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;AMD&amp;amp;&amp;amp;CMD是浏览器端模块化开发的规范，服务器端的规范是CommonJS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8b826b79jw1f54e31blynj209g0bymxm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="参考资料" scheme="http://zhenghe39.com/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Javascript" scheme="http://zhenghe39.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Stop the cascade</title>
    <link href="http://zhenghe39.com/2016/06/21/%E8%BD%AC%E8%BD%BD-Stop-the-cascade/"/>
    <id>http://zhenghe39.com/2016/06/21/转载-Stop-the-cascade/</id>
    <published>2016-06-21T15:38:50.000Z</published>
    <updated>2016-07-11T09:17:45.000Z</updated>
    
    <content type="html">&lt;p&gt;转载自&lt;a href=&quot;http://markdotto.com/2012/03/02/stop-the-cascade/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://markdotto.com/2012/03/02/stop-the-cascade/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cascading styles is at the core of CSS—hell, it’s in the name—but experience has shown that building systems with too many &lt;em&gt;cascading styles&lt;/em&gt; can be detrimental. Some times it’s completely necessary to just &lt;strong&gt;stop the cascade&lt;/strong&gt;.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Let’s take the modal of &lt;a href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bootstrap&lt;/a&gt; as an example.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;modal&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;modal-header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Modal title&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;modal-body&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Modal subheader&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Content for the modal, like additional text and forms, goes here.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;modal-footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;btn&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Done&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Notice how we namespace classes at key levels—each class name begins with &lt;code&gt;modal-&lt;/code&gt;as a prefix. &lt;a href=&quot;http://www.markdotto.com/2012/02/16/scope-css-classes-with-prefixes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Class name prefixing&lt;/a&gt; makes our code more durable and easier to maintain, but it also better enables us to scope styles to only the relevant elements.&lt;/p&gt;
&lt;p&gt;Consider this snippet of CSS used to style the modal heading:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.modal&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; center&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;By using this generic selector, we inadvertently change the styles of the &lt;code&gt;h3&lt;/code&gt; in the &lt;code&gt;.modal-body&lt;/code&gt;. We’ve introduced an instance of cascading styles—any &lt;code&gt;h3&lt;/code&gt;throughout the &lt;code&gt;.modal&lt;/code&gt; will be center aligned. Therefore, if we wanted the other instances of &lt;code&gt;h3&lt;/code&gt; to be left-aligned, we’d have to override our brand new styles with something like this:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.modal&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.modal-body&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It’s worth noting that this example isn’t without its flaws, but that’s the point. With a little more time and thought, one can easily avoid this problem, avoiding extra lines of code and more complications in the overall system. Had we done things differently and altered our selector, our CSS might look like this:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.modal-header&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; center&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;By limiting the scope of a selector, we reduce the likelihood that we need additional code down the line by strengthening each component and limiting the effects of their styles. If done right, we can create an entire system of independent and durable, yet still flexible, components. It’s a promising approach I think, but one not to employ with an iron first.&lt;/p&gt;
&lt;p&gt;Some CSS should be allowed to cascade. Base typography, links, and the such are prime examples of something not to redeclare over and over again. This would only serve to weigh down a project and make it even more unmanageable. Instead, the goal as always is to strike a balance.&lt;/p&gt;
&lt;p&gt;Find ways to isolate components and make them more durable by limiting the scope of their CSS. You’ll discover that components can be more easily rearranged without causing adverse effects and the amount of code necessary will likely decrease.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;http://markdotto.com/2012/03/02/stop-the-cascade/&quot;&gt;http://markdotto.com/2012/03/02/stop-the-cascade/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cascading styles is at the core of CSS—hell, it’s in the name—but experience has shown that building systems with too many &lt;em&gt;cascading styles&lt;/em&gt; can be detrimental. Some times it’s completely necessary to just &lt;strong&gt;stop the cascade&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://zhenghe39.com/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Css" scheme="http://zhenghe39.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>Scope CSS classes with prefixes</title>
    <link href="http://zhenghe39.com/2016/06/21/%E8%BD%AC%E8%BD%BD-Scope-CSS-classes-with-prefixes/"/>
    <id>http://zhenghe39.com/2016/06/21/转载-Scope-CSS-classes-with-prefixes/</id>
    <published>2016-06-21T14:25:50.000Z</published>
    <updated>2016-07-11T09:17:56.000Z</updated>
    
    <content type="html">&lt;p&gt;转载自：&lt;a href=&quot;http://markdotto.com/2012/02/16/scope-css-classes-with-prefixes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://markdotto.com/2012/02/16/scope-css-classes-with-prefixes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When building a CSS design system like Bootstrap, it’s important to keep things simple, durable, and flexible. This is no easy task, especially on larger teams and projects where the number of components can become quite high. To help improve this situation in a CSS design system, you might consider using prefixed classes instead of chained classes.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Taking the &lt;code&gt;chained classes&lt;/code&gt; approach, your CSS selectors might look something like this for a given set of components:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.success &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.btn.success &amp;#123; .. &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.alert.success &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We have here a global base class, &lt;code&gt;.success&lt;/code&gt;, that might house all the commonalities between successful buttons and alerts. Then, at the individual component level, we add on or override as necessary. However, this wide open class and chained approach exposes developers to a number of questions and potential paint points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What’s that base class stand for?&lt;/li&gt;
&lt;li&gt;What elements will be affected at the root level?&lt;/li&gt;
&lt;li&gt;How many elements have .success chained onto them?&lt;/li&gt;
&lt;li&gt;Can it be extended further to more components?&lt;/li&gt;
&lt;li&gt;What if one instance of .success uses green text on a white background while another uses white text on a green background?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And those questions barely scratch the surface. This solution isn’t necessarily bad, but when scale, brevity, and flexibility are your top requirements, it might not be the best idea. A better solution might be using prefixed classes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prefixed classes&lt;/code&gt; guide developers towards a simpler and more maintainable direction for building an extensive CSS design system. Here’s what we have if we take away the generic base class and scope things per component with prefixes:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.btn-success &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.alert-success &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This way, &lt;strong&gt;the base class is at the component level&lt;/strong&gt; and not the entire system level. In other words, our base classes have become &lt;code&gt;.btn&lt;/code&gt; and &lt;code&gt;.alert&lt;/code&gt;, not &lt;code&gt;.success&lt;/code&gt;. There’s no bleeding of styles or behavior from one component to another here because we treat components in a “successful state” as an idea across the design system. That is to say, we have a shared idea of what “success” looks for buttons and alerts, but the execution is scoped entirely to each independent component. No questions of where common styles are used and no concern of unintended effects, making each component more durable and flexible.&lt;/p&gt;
&lt;p&gt;While a very tactical and detail-oriented practice, building components that inherently isolate themselves for improved modularity and customization in a system like Bootstrap makes for better code and a more enjoyable project down the line.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;http://markdotto.com/2012/02/16/scope-css-classes-with-prefixes/&quot;&gt;http://markdotto.com/2012/02/16/scope-css-classes-with-prefixes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When building a CSS design system like Bootstrap, it’s important to keep things simple, durable, and flexible. This is no easy task, especially on larger teams and projects where the number of components can become quite high. To help improve this situation in a CSS design system, you might consider using prefixed classes instead of chained classes.&lt;/p&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://zhenghe39.com/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Css" scheme="http://zhenghe39.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>JS下的JSON解析及序列化</title>
    <link href="http://zhenghe39.com/2016/06/20/JS%E4%B8%8B%E7%9A%84JSON%E8%A7%A3%E6%9E%90%E5%8F%8A%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://zhenghe39.com/2016/06/20/JS下的JSON解析及序列化/</id>
    <published>2016-06-19T23:35:12.000Z</published>
    <updated>2016-06-19T23:35:12.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;JSON是一种网络传输常用的数据格式,表现形式为有特殊规则的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解析JSON&quot;&gt;&lt;a href=&quot;#解析JSON&quot; class=&quot;headerlink&quot; title=&quot;解析JSON&quot;&gt;&lt;/a&gt;解析JSON&lt;/h3&gt;&lt;p&gt;eval是比较古老的解析JSON数据的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&quot;name&quot;:&quot;sam&quot;,&quot;age&quot;:25,&quot;isSuccess&quot;:false&amp;#125;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;+data+&lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;比较推荐的是JSON.parse来解析JSON数据，而且其还可定制解析规则。以下为“当value值为字符串true或false值时，将其转化为对应Boolean值”的解析规则：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsonStr = &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&quot;name&quot;:&quot;sam&quot;,&quot;age&quot;:25,&quot;isSuccess&quot;:&quot;false&quot;,&quot;time&quot;:&amp;#123;&quot;enough&quot;:&quot;false&quot;,&quot;multiFormate&quot;:true&amp;#125;&amp;#125;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(jsonStr,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key,value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;false&#39;&lt;/span&gt; === value || &lt;span class=&quot;string&quot;&gt;&#39;true&#39;&lt;/span&gt; === value)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;序列化JSON&quot;&gt;&lt;a href=&quot;#序列化JSON&quot; class=&quot;headerlink&quot; title=&quot;序列化JSON&quot;&gt;&lt;/a&gt;序列化JSON&lt;/h3&gt;&lt;p&gt;JSON.stringify也是可以配置序列化规则的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsObj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    toLower:&lt;span class=&quot;string&quot;&gt;&#39;HELLO&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    toUpper:&lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    normal:&lt;span class=&quot;string&quot;&gt;&#39;haha&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsonStr = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(jsObj,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key,value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(key)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;toLower&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value.toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;toUpper&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value.toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(jsonStr);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类对象还可以实现toJSON接口来定制自身的序列化规则。这时候，使用JSON.stringify来序列化时，会优先调用toJSON，对得到的返回值进行序列化。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$.extend(Person,&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prototype:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toJSON:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age:&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age+&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;sam&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JSON是一种网络传输常用的数据格式,表现形式为有特殊规则的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解析JSON&quot;&gt;&lt;a href=&quot;#解析JSON&quot; class=&quot;headerlink&quot; title=&quot;解析JSON&quot;&gt;&lt;/a&gt;解析JSON&lt;/h3&gt;&lt;p&gt;eval是比较古老的解析JSON数据的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&quot;name&quot;:&quot;sam&quot;,&quot;age&quot;:25,&quot;isSuccess&quot;:false&amp;#125;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;+data+&lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程札记" scheme="http://zhenghe39.com/categories/%E7%BC%96%E7%A8%8B%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="JSON" scheme="http://zhenghe39.com/tags/JSON/"/>
    
      <category term="Javascript" scheme="http://zhenghe39.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Oracle数据库的监听器</title>
    <link href="http://zhenghe39.com/2016/06/20/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://zhenghe39.com/2016/06/20/Oracle数据库的监听器/</id>
    <published>2016-06-19T23:33:52.000Z</published>
    <updated>2016-06-19T23:33:52.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Oracle数据库需要配置监听程序，用于监听&lt;strong&gt;客户端的连接请求&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8b826b79jw1f1fenxg9j1j20dk04t0th.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下为「SID」ZHeOracle数据库的监听器配置过程，有如下两种配置方式：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;可视化&quot;&gt;&lt;a href=&quot;#可视化&quot; class=&quot;headerlink&quot; title=&quot;可视化&quot;&gt;&lt;/a&gt;可视化&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8b826b79jw1f1fef1574pj206m06yq47.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8b826b79jw1f1fehqo601j20gr0ajgn2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8b826b79jw1f1fei91i43j20h2094mya.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h3&gt;&lt;p&gt;「listener.ora」：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8b826b79jw1f1ff83fkjsj20kb070wgd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Oracle数据库需要配置监听程序，用于监听&lt;strong&gt;客户端的连接请求&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8b826b79jw1f1fenxg9j1j20dk04t0th.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下为「SID」ZHeOracle数据库的监听器配置过程，有如下两种配置方式：&lt;/p&gt;
    
    </summary>
    
      <category term="编程札记" scheme="http://zhenghe39.com/categories/%E7%BC%96%E7%A8%8B%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Oracle" scheme="http://zhenghe39.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动</title>
    <link href="http://zhenghe39.com/2016/06/20/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <id>http://zhenghe39.com/2016/06/20/清除浮动/</id>
    <published>2016-06-19T23:26:30.000Z</published>
    <updated>2016-06-19T23:34:39.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;浮动元素下面加clearfix的空标签&quot;&gt;&lt;a href=&quot;#浮动元素下面加clearfix的空标签&quot; class=&quot;headerlink&quot; title=&quot;浮动元素下面加clearfix的空标签&quot;&gt;&lt;/a&gt;浮动元素下面加clearfix的空标签&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;‘clearfix’&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;zoom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:after&lt;/span&gt;,&lt;span class=&quot;class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; both&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;给浮动元素的父元素加上两个伪类&quot;&gt;&lt;a href=&quot;#给浮动元素的父元素加上两个伪类&quot; class=&quot;headerlink&quot; title=&quot;给浮动元素的父元素加上两个伪类&quot;&gt;&lt;/a&gt;给浮动元素的父元素加上两个伪类&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#parentEle&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:after&lt;/span&gt;,&lt;span class=&quot;id&quot;&gt;#parentEle&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#parentEle&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; both&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;浮动元素下面加clearfix的空标签&quot;&gt;&lt;a href=&quot;#浮动元素下面加clearfix的空标签&quot; class=&quot;headerlink&quot; title=&quot;浮动元素下面加clearfix的空标签&quot;&gt;&lt;/a&gt;浮动元素下面加clearfix的空标签&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;‘clearfix’&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;zoom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:after&lt;/span&gt;,&lt;span class=&quot;class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; both&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="参考资料" scheme="http://zhenghe39.com/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Css" scheme="http://zhenghe39.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>BFC神奇背后的原理</title>
    <link href="http://zhenghe39.com/2016/06/19/%E8%BD%AC%E8%BD%BD-BFC%E7%A5%9E%E5%A5%87%E8%83%8C%E5%90%8E%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://zhenghe39.com/2016/06/19/转载-BFC神奇背后的原理/</id>
    <published>2016-06-19T04:08:41.000Z</published>
    <updated>2016-07-11T09:18:10.000Z</updated>
    
    <content type="html">&lt;p&gt;转载自：&lt;a href=&quot;http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html&lt;/a&gt;，部分内容略作调整。&lt;/p&gt;
&lt;h3 id=&quot;BFC是什么？&quot;&gt;&lt;a href=&quot;#BFC是什么？&quot; class=&quot;headerlink&quot; title=&quot;BFC是什么？&quot;&gt;&lt;/a&gt;BFC是什么？&lt;/h3&gt;&lt;p&gt;在解释 BFC 是什么之前，需要先介绍 Box、Formatting Context的概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Box&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block-level box : display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；&lt;/li&gt;
&lt;li&gt;inline-level box : display属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；&lt;/li&gt;
&lt;li&gt;run-in box : css3 中才有， 这儿先不讲了。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Formatting context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。&lt;/p&gt;
&lt;p&gt;CSS2.1 中只有 BFC 和 IFC, CSS3 中还增加了 GFC 和 FFC。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BFC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BFC布局规则&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;内部的Box会在垂直方向，一个接一个地放置&lt;/li&gt;
&lt;li&gt;Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠&lt;/li&gt;
&lt;li&gt;每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此&lt;/li&gt;
&lt;li&gt;BFC的区域不会与float box重叠&lt;/li&gt;
&lt;li&gt;BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此&lt;/li&gt;
&lt;li&gt;计算BFC的高度时，浮动元素也参与计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;哪些元素会生成BFC&quot;&gt;&lt;a href=&quot;#哪些元素会生成BFC&quot; class=&quot;headerlink&quot; title=&quot;哪些元素会生成BFC&quot;&gt;&lt;/a&gt;哪些元素会生成BFC&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;根元素&lt;/li&gt;
&lt;li&gt;float属性不为none&lt;/li&gt;
&lt;li&gt;position为absolute或fixed&lt;/li&gt;
&lt;li&gt;display为inline-block, table-cell, table-caption, flex, inline-flex&lt;/li&gt;
&lt;li&gt;overflow不为visible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要满足上述条件之一即可&lt;/p&gt;
&lt;h3 id=&quot;BFC的作用及原理&quot;&gt;&lt;a href=&quot;#BFC的作用及原理&quot; class=&quot;headerlink&quot; title=&quot;BFC的作用及原理&quot;&gt;&lt;/a&gt;BFC的作用及原理&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;自适应两栏布局&lt;/strong&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;https://jsfiddle.net/samuerio/4o8r2ebj/embedded/result,resources,html,css,js/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;根据BFC布局规则第3条：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，虽然存在浮动的元素aslide，但main的左边依然会与包含块的左边相接触。根据BFC布局规则第四条:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BFC的区域不会与float box重叠。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt; {
    &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当触发main生成BFC后，这个新的BFC不会与浮动的aside重叠。因此会根据包含块的宽度，和aside的宽度，自动变窄。效果如下：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;https://jsfiddle.net/samuerio/73n3nuj0/1/embedded/result,resources,html,css,js/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;清除内部浮动&lt;/strong&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;https://jsfiddle.net/samuerio/etsfkchw/1/embedded/result,resources,html,css,js/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;根据BFC布局规则第六条：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算BFC的高度时，浮动元素也参与计算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为达到清除内部浮动，我们可以触发par生成BFC，那么par在计算高度时，par内部的浮动元素child也会参与计算。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.par&lt;/span&gt; {
    &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;https://jsfiddle.net/samuerio/hpx5vbgm/1/embedded/result,resources,html,css,js/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;防止垂直margin重叠&lt;/strong&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;https://jsfiddle.net/samuerio/e3x5fhc1/embedded/result,resources,html,css,js/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;两个p之间的距离为100px，发生了margin重叠。根据BFC布局规则第二条：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以在p外面包裹一层容器，并触发该容器生成一个BFC。那么两个P便不属于同一个BFC，就不会发生margin重叠了。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;https://jsfiddle.net/samuerio/k5yjotkp/3/embedded/result,resources,html,css,js/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;其实以上的几个例子都体现了BFC布局规则第五条：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html&quot;&gt;http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html&lt;/a&gt;，部分内容略作调整。&lt;/p&gt;
&lt;h3 id=&quot;BFC是什么？&quot;&gt;&lt;a href=&quot;#BFC是什么？&quot; class=&quot;headerlink&quot; title=&quot;BFC是什么？&quot;&gt;&lt;/a&gt;BFC是什么？&lt;/h3&gt;&lt;p&gt;在解释 BFC 是什么之前，需要先介绍 Box、Formatting Context的概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Box&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block-level box : display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；&lt;/li&gt;
&lt;li&gt;inline-level box : display属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；&lt;/li&gt;
&lt;li&gt;run-in box : css3 中才有， 这儿先不讲了。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://zhenghe39.com/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Css" scheme="http://zhenghe39.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>消灭CallBack导致的函数金字塔</title>
    <link href="http://zhenghe39.com/2016/04/10/%E6%B6%88%E7%81%ADCallBack%E5%AF%BC%E8%87%B4%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%91%E5%AD%97%E5%A1%94/"/>
    <id>http://zhenghe39.com/2016/04/10/消灭CallBack导致的函数金字塔/</id>
    <published>2016-04-10T06:56:15.000Z</published>
    <updated>2016-06-19T23:34:10.000Z</updated>
    
    <content type="html">&lt;p&gt;对于开发人员来说，既要保持页面与用户的交互不受影响，又要协调页面与异步任务的关系，这种非线性的编程存在适应的困难。&lt;/p&gt;
&lt;p&gt;传统的编程方式是采用CallBack来协调「用户交互」和「异步任务」的，但这种方式会导致嵌套的函数，使得代码结构支离破碎，难以维护。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Promise模式拯救「延迟」引起CallBack&quot;&gt;&lt;a href=&quot;#Promise模式拯救「延迟」引起CallBack&quot; class=&quot;headerlink&quot; title=&quot;Promise模式拯救「延迟」引起CallBack&quot;&gt;&lt;/a&gt;Promise模式拯救「延迟」引起CallBack&lt;/h3&gt;&lt;p&gt;服务请求是有延迟、需要异步的，而Promise模式可以消除多层嵌套函数，使得同步式编码更加流畅，易于理解。(&lt;strong&gt;注意&lt;/strong&gt;:callback会打断同步式编码，应该尽量避免)。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 第三方服务接口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @type &amp;#123;&amp;#123;getVedio: thirdPartyService.getVedio, getOneWord: thirdPartyService.getOneWord&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; thirdPartyService = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         * 获取&#39;一言&#39;的异步Promiss约定&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         * @returns &amp;#123;*|promise&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getOneWord:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Q.promise(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve,reject&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                request(&lt;span class=&quot;string&quot;&gt;&#39;http://api.hitokoto.us/rand?charset=utf-8&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, res, body&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!err &amp;amp;&amp;amp; res.statusCode == &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        data = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(body);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        resolve(data.hitokoto+&lt;span class=&quot;string&quot;&gt;&#39;\n来源:&#39;&lt;/span&gt;+data.source);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        reject(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的话是将服务请求(异步任务)都归于&lt;code&gt;thirdPartyService&lt;/code&gt;中，并使用Promise模式，返回的deferred用于同步地写入请求到数据后的处理。&lt;/p&gt;
&lt;h3 id=&quot;事件注册模式拯救「用户交互」引起的CallBack&quot;&gt;&lt;a href=&quot;#事件注册模式拯救「用户交互」引起的CallBack&quot; class=&quot;headerlink&quot; title=&quot;事件注册模式拯救「用户交互」引起的CallBack&quot;&gt;&lt;/a&gt;事件注册模式拯救「用户交互」引起的CallBack&lt;/h3&gt;&lt;p&gt;这种模式类似Dom和相关事件之间的关系，当Dom被点击，则发射出一个点击事件的信号，触发点击事件的监听等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;传统CallBack方式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//接收客户端信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        myWeixin.receiveMsg(clientMsg.Content[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],clientMsg.MsgType[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],textMsgCallBack);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;事件注册方式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//监听客户端文本信息(即:注册[文本信息接受事件])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myWeixin.listener().on(&lt;span class=&quot;string&quot;&gt;&#39;TextMsg&#39;&lt;/span&gt;,onTextMsg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//接收客户端信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myWeixin.receiveMsg(clientMsg.Content[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],clientMsg.MsgType[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提前注册「文本信息接受事件」的监听程序，当接受到文本信息时，发出一个文本信息接受信号，调用监听程序。这种写法使得&lt;code&gt;晦涩的回调函数&lt;/code&gt;消失代替以&lt;code&gt;事件注册&lt;/code&gt;，增加了程序的可读性和灵活性。使用者使用封装的JS对象时，只要关注JS对象提供哪些事件点就好了，不需要关注其中的处理逻辑。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于开发人员来说，既要保持页面与用户的交互不受影响，又要协调页面与异步任务的关系，这种非线性的编程存在适应的困难。&lt;/p&gt;
&lt;p&gt;传统的编程方式是采用CallBack来协调「用户交互」和「异步任务」的，但这种方式会导致嵌套的函数，使得代码结构支离破碎，难以维护。&lt;/p&gt;
    
    </summary>
    
      <category term="编程札记" scheme="http://zhenghe39.com/categories/%E7%BC%96%E7%A8%8B%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://zhenghe39.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>content-type影响request.getParameter获取数据</title>
    <link href="http://zhenghe39.com/2016/04/09/content-type%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>http://zhenghe39.com/2016/04/09/content-type的意义/</id>
    <published>2016-04-09T09:45:37.000Z</published>
    <updated>2016-06-19T23:34:28.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://tool.oschina.net/commons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Content-type&lt;/a&gt;决定了文件类型以及数据的展示方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The purpose of the Content-Type field is to describe the data contained in the body fully enough that the receiving user agent can pick an appropriate agent or mechanism to present the data to the user, or otherwise deal with the data in an appropriate manner.&lt;br&gt;content-type&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Get请求的数据是附着在URL后（即位于HTTP协议头部），而Post提交的数据是放于HTTP包的包体。故content-type只会影响到Post提交的数据。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;application-x-www-form-urlencoded&quot;&gt;&lt;a href=&quot;#application-x-www-form-urlencoded&quot; class=&quot;headerlink&quot; title=&quot;application/x-www-form-urlencoded&quot;&gt;&lt;/a&gt;application/x-www-form-urlencoded&lt;/h3&gt;&lt;p&gt;application/x-www-form-urlencoded为「表单提交」，默认的&lt;code&gt;Ajax Post&lt;/code&gt;提交也是按这种方式。&lt;/p&gt;
&lt;h3 id=&quot;application-json&quot;&gt;&lt;a href=&quot;#application-json&quot; class=&quot;headerlink&quot; title=&quot;application/json&quot;&gt;&lt;/a&gt;application/json&lt;/h3&gt;&lt;p&gt;这种时候，只能从HTTP内容体里面获取提交的数据&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(actionUrl,&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      method:&lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      data:&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(postData),&lt;span class=&quot;comment&quot;&gt;//这里必须序列化为JSON字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      contentType:&lt;span class=&quot;string&quot;&gt;&#39;application/json; charset=utf-8&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      dataType:&lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      success:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;rs&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rs.success)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              resolve(rs.content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;readStringFromRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpServletRequest request,String encode)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	StringBuffer json = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	InputStream in = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		in = request.getInputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		InputStreamReader isr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(in,encode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BufferedReader bufferReader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(isr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String line = bufferReader.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(StringUtils.isEmpty(line))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			line = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		do&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			json.append(line);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			line = bufferReader.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(line != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				json.append(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(line != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(IOException e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tool.oschina.net/commons&quot;&gt;Content-type&lt;/a&gt;决定了文件类型以及数据的展示方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The purpose of the Content-Type field is to describe the data contained in the body fully enough that the receiving user agent can pick an appropriate agent or mechanism to present the data to the user, or otherwise deal with the data in an appropriate manner.&lt;br&gt;content-type&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Get请求的数据是附着在URL后（即位于HTTP协议头部），而Post提交的数据是放于HTTP包的包体。故content-type只会影响到Post提交的数据。&lt;/p&gt;
    
    </summary>
    
      <category term="编程札记" scheme="http://zhenghe39.com/categories/%E7%BC%96%E7%A8%8B%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Http" scheme="http://zhenghe39.com/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>Vi</title>
    <link href="http://zhenghe39.com/2016/03/21/vi/"/>
    <id>http://zhenghe39.com/2016/03/21/vi/</id>
    <published>2016-03-21T13:56:20.000Z</published>
    <updated>2016-09-01T09:49:54.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;进入编辑环境:       vi&lt;/li&gt;
&lt;li&gt;打开/创建:         vi file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3种模式：&quot;&gt;&lt;a href=&quot;#3种模式：&quot; class=&quot;headerlink&quot; title=&quot;3种模式：&quot;&gt;&lt;/a&gt;3种模式：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;命令模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 跳行： G「跳到末行」  nG「跳到n行」&lt;br&gt; 复制： yy「复制当前整行」 nyy「复制从当前行开始的n行」&lt;br&gt; 黏贴： p「插入的形式，以当前行的下一行作为插入点」&lt;br&gt; 删除： dd「删除当前行」 ndd「删除从当前行开始的n行」&lt;br&gt; 翻页： ctrl+f「向后翻整页」 ctrl+b「向前翻整页」&lt;br&gt; 撤销： u「取消最近一次的操作」U「取消对当前进行的所有操作」&lt;br&gt; 恢复： ctrl+r「对撤销进行恢复」&lt;br&gt; 查询： /word（自上而下查找） ?word（自下而上查找） n（定位下一个）N（定位上一个)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;输入模式&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;末行模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 替换： %s/old/new/g「替换文件范围内的所有“old”为“new”」&lt;br&gt; 行号： set nu「设置」     set nonu「取消」&lt;br&gt; 退出： q!「强制退出」&lt;br&gt; 保存： wq「保存并退出」    w filename「另存为filename」&lt;br&gt; 追加： r filename「追加filename内容到当前文件中」&lt;br&gt; 打开： e！filename「打开filename，并放弃当前文件的修改」 e filename「打开filename」&lt;br&gt; 帮助： help&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;进入编辑环境:       vi&lt;/li&gt;
&lt;li&gt;打开/创建:         vi file&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
      <category term="参考资料" scheme="http://zhenghe39.com/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="vi" scheme="http://zhenghe39.com/tags/vi/"/>
    
  </entry>
  
</feed>
